import abc
import os
import shutil

from volatileIO.FileCreator import FileCreator

class AbstractScripter(FileCreator): 
    
    def __init__(self, dirPath):
        FileCreator.__init__(self, dirPath)
        self.writables = []
    
    @abc.abstractmethod
    def add(self, writable):
        pass

    def _addWritable(self, writable):
        self.writables.append(writable)
        
    def getWritables(self):
        return self.writables

class AutoItScriptWriter(AbstractScripter):
    FILENAME = 'main.au3'
    
    def __init__(self, dirPath="./output/", signalFilePath="signal"):
        if os.path.exists(dirPath):
            shutil.rmtree(dirPath)
        AbstractScripter.__init__(self, dirPath)
        self.signalFilePath = signalFilePath
        
    def add(self, writable):
        self._addWritable(writable)
        return self
        
    def getFileContent(self):
        return "\n".join([";This script was automatically generated by volatileBash",
            'FileDelete("'+self.signalFilePath+'")'] +
            [str(w) for w in self.getWritables()] +
            ['FileWrite("'+self.signalFilePath+'","")'])
        
    def writeSolutionInfo(self, filename="solutionInfo.txt"):
        with open(self._createFile('extra/' + filename), 'a') as f:
            for w in self.writables:
                f.write(w.solutionInfo())
        return self