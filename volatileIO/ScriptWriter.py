import os

import Writable
from FileCreator import FileCreator
from volatileApp.Application import Application


class ScriptWriter(FileCreator):
    '''
    Class used for creating bash script files.
    Implements the FileCreator
    '''

    # Header constant for the script
    # Contains routine for calling the installer script
    _header = '#This script was generated by volatileBash\n' \
              'echo Do you want to run the Application Installer? [Y/N]\n' \
              'read input\n' \
              'if [[ $input =~ ^([yY][eE][sS]|[yY])$ ]]\n' \
              'then\n' \
              '\techo Installing...\n' \
              '\tbash ./installer.sh\n' \
              'else\n' \
              '\techo Skipping Installer\n' \
              'fi\n\n' \
              'true'

    def __init__(self, filePath):
        '''
        creates a new ScriptWriter object
        :param filePath: the path to the output file
        '''
        super(ScriptWriter, self).__init__(filePath)
        self.writables = []

    def add(self, writable):
        '''
        adds a new writable to the script.
        The writables will be executed in paralell (& concatinator)
        :param writable: the writable to be added
        :return: the ScriptWriter object for method chaining
        '''
        self.writables.append(writable)

        return self

    def andParalell(self, writable):
        '''
        adds a new writable to the script.
        The writables will be executed in strict sequence (&& concatinator)
        :param writable: the writable to be added
        :return: the ScriptWriter object for method chaining
        '''
        self.writables.append(Writable.ParalellAnd())
        self.writables.append(writable)

        return self

    def getFileContent(self):
        content = self._header

        for writable in self.writables:
            content += ' & ' + str(writable)

        return content

    def _makeInstaller(self):
        '''
        internal function for creating an installer script.
        This function will create an installer.sh file in the same dir as specified upon object creation.
        The resulting script will install all the Applications added to the main script
        :return: the ScriptWriter object for method chaining
        '''
        # create the Installer file in the same directory
        installerPath = os.path.dirname(self.filePath) + '/installer.sh'
        self._createFile(installerPath)

        #adds installer routine for each Application in writables
        f = open(installerPath, 'ab')
        f.write("sudo apt-get -y update\n")
        for writable in self.writables:
            if isinstance(writable, Application):
                f.write(writable.install() + '\n')
        f.close()

        return self

    def _makeScript(self):
        '''
        internal function for creating the main script.
        The resulting script will contain all the writables in this model
        :return: the ScriptWriter object for method chaining
        '''

        self._createFile()

        f = open(self.filePath, 'ab')
        f.write(self.getFileContent())
        f.close()

        return self

    def flush(self):
        self._makeScript()
        self._makeInstaller()
