"""Module containing classes that create scripts from Writables."""
# -*- coding: utf-8 -*-

import abc
import string
import random

from writer.FileCreator import FileCreator

class AbstractScripter(FileCreator): 
    
    """Abstract base class for creating scripts from Writables."""
    
    def __init__(self, dirPath):
        FileCreator.__init__(self, dirPath)
        self.writables = []
    
    @abc.abstractmethod
    def add(self, writable) -> 'AbstractScripter':
        """Adds a Writable to be compiled into the final script."""
        pass

    def _addWritable(self, writable):
        self.writables.append(writable)
        
    def getWritables(self):
        return self.writables

class ShellScriptWriter(AbstractScripter):
    
    """Creates a shell script from Writables."""
    
    FILENAME = 'additional.sh'

    def __init__(self, dirPath="./output"):
        AbstractScripter.__init__(self, dirPath)
        
    def add(self, writable):
        self._addWritable(writable)
        return self
    
    def getFileContent(self):
        return "\n".join(["#!/bin/bash"] + [w.command() for w in self.getWritables()] + ["sleep 5s"])

class AutoItScriptWriter(AbstractScripter):
    
    """Creates an AutoIt script from Writables."""
    
    FILENAME = 'main.au3'
    HEADER = "This file contains automatically generated solution guidelines "\
             "and should not be handed to contestants. Additional files like "\
             "images, zipfiles etc. also contained in this directory and can "\
             "be used to verify a solution.\n\n"
                    
    def __init__(self, dirPath="./output", signalFile="signal"):
        #if os.path.exists(dirPath):
        #    shutil.rmtree(dirPath)
        AbstractScripter.__init__(self, dirPath)
        self.signalFile = signalFile
        self.extraDirPath = dirPath + '/extra'
        
    def add(self, writable):
        self._addWritable(writable)
        return self
    
    def _noise(self, length=1024):
        """Creates a random string of given length as AutoIt comment."""
        return ';' + ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(length))
        
    def getFileContent(self):
        # Add Noise to make the file big enough to not be stored in the MFT table.
        return "\n".join([self._noise(), 
            ';This script was automatically generated by volatileBash',
            'FileDelete("{}")'.format(self.signalFile)] +
            [str(w) for w in self.getWritables()] +
            ['FileDelete("./main.au3")','Sleep(5000)',
            'FileWrite("{}","")'.format(self.signalFile), 
             ])
                    
    def writeSolutionInfo(self, filename="solutionInfo.txt"):
        """Compiles solution info of each Writable into a hint file."""
        with open(self._createFile('extra/' + filename), 'a') as f:
            f.write(self.HEADER)
            for w in self.writables:
                f.write(w.solutionInfo() + "\n")
        return self
